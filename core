#############################################
# Function
#############################################

Add-Type -AssemblyName System.Web.Extensions

############################
# Функции проверки контента
############################
function Core_CheckObfuscation {
#Скрипт основан на вычислении Энтропии
                            param($Content)
                            $RequiredSimilarity = 0.8
                            $characterMap = @{}
                            $Set1 = @{'E'=9.818; 'T'=7.471;'A'=5.575;'R'=5.464;'S'=5.316;'I'=5.123;'N'=5.066;'O'=5.059;'L'=3.575;'C'=3.253;'M'=3.201;'$'=3.111;'P'=2.875;'D'=2.799;'U'=2.315;'-'=1.932;'.'=1.917;'"'=1.798;'F'=1.696;'G'=1.542;'B'=1.493;'H'=1.474;'='=1.342;'('=1.336;')'=1.33;'Y'=1.193;'W'=1.173;'V'=0.902;'{'=0.771;'}'=0.766;','=0.655;'X'=0.651;'['=0.621;']'=0.62;"'"=0.587;'_'=0.538;':'=0.483;'K'=0.453;'0'=0.45;'/'=0.432;'J'=0.345;'1'=0.316;'+'=0.27;'2'=0.245;'|'=0.238;';'=0.23;'\'=0.222;'Q'=0.218;'>'=0.196;'<'=0.185;'Z'=0.154;'3'=0.133;'*'=0.128;'`'=0.122;'5'=0.114;'4'=0.103;'@'=0.092;'6'=0.087;'8'=0.076;'7'=0.067;'%'=0.063;'9'=0.061;'!'=0.045;'?'=0.035;'&'=0.027}
                            $Set1 = $Set1.GetEnumerator() | Sort-Object -desc value | % {[PSCustomObject] @{ Name = $_.Name; Percent = $_.Value}}

                            
                            ($content -replace '(?s)<#.*?#>','' -replace '#.*','' -replace '\s','').ToCharArray() | %{
                                                                                                                       $key = $_.ToString().ToUpper()
                                                                                                                       $characterMap[$key] = 1 + $characterMap[$key] }

                            $total = ($characterMap.GetEnumerator() | Measure-Object -sum Value).Sum
                            $set2 =$characterMap.GetEnumerator() | Sort-Object -desc value | % {
                            [PSCustomObject] @{ Name = $_.Name; Percent = [Math]::Round($_.Value / $total * 100, 3)}}
                            

                            $allkeys = @($Set1) + @($Set2) | % {$_.Name }| Sort-Object -Unique

                            $set1Hash = @{}
                            $set2Hash = @{}
                            $setsToProcess = @($Set1, $Set1Hash), @($Set2, $Set2Hash)

                            foreach($set in $setsToProcess){
                                                            $set[0] | % {$set[1][$_.Name] = $_.Percent}
                                                            }

                            $dot = 0
                            $mag1 = 0
                            $mag2 = 0

                            foreach($key in $allkeys){
                                                      $dot += $set1Hash[$key] * $set2Hash[$key]
                                                      $mag1 +=  ($set1Hash[$key] * $set1Hash[$key])
                                                      $mag2 +=  ($set2Hash[$key] * $set2Hash[$key])
                                                     }

                            $mag1 = [Math]::Sqrt($mag1)
                            $mag2 = [Math]::Sqrt($mag2)

    
                            $rez = [Math]::Round($dot / ($mag1 * $mag2), 3)
                            
                            $IsObfuscated = $False
                            if($rez -lt $RequiredSimilarity) {
                                                              $IsObfuscated = $True
                                                              }
                            return($IsObfuscated)
                           

}

# Core_CheckObfuscation -Content ""

function Core_GetRate {
                            param($Content)
                            $characterMap = @{}
                            $objs=@()
                            ($content -replace '(?s)<#.*?#>','' -replace '#.*','' -replace '\s','').ToCharArray() | %{
                                                                                                                       $key = $_.ToString().ToUpper()
                                                                                                                       $characterMap[$key] = 1 + $characterMap[$key] }

                            $total = ($characterMap.GetEnumerator() | Measure-Object -sum Value).Sum
                            $characterMap.GetEnumerator() | Sort-Object -desc value | % {                            
                                                                                        $objs+= Core_CreateNewObj2 -Columns Char,Rate -Values $_.Name, (([Math]::Round($_.Value / $total * 100, 3)).tostring())
                                                                                        }
                            return($objs)
                      }
                      
#Core_GetRate -Content 'asdfghhhjkl'
                                            
                      
function Core_GetRateMaxChar {
                             param($Content)
                             $ent_obj=Core_GetEntropy -Content $Content
                             $ent_max=($ent_obj| %{$_.val |Sort-Object -Descending})[0]
                             $char=($ent_obj|?{$_.val -eq $ent_max}|%{$_.key}) -join ","
                             return($char)

}

#Core_GetRateMaxChar -Content "asdfghhjklll"
                      
function Core_GetLengthContent {
                        param($text)
                        return(([regex]::match($text, ".+")).Length)
                     }
                     
#Core_GetLengthContent -text "aGVsbG8gd29ybGQ="


###############################
#  функции конвертирования данных
###############################

# JSON

function Core_ConvertFromJson([object] $item){  
    $ps_js=new-object system.web.script.serialization.javascriptSerializer 
    return($ps_js.DeserializeObject($item))
}

function Core_ConvertToJson([object] $item){ 
    $ps_js=new-object system.web.script.serialization.javascriptSerializer 
    return($ps_js.Serialize($item) )
}

function Core_DTParser{
                       param ($dt)
                       # формат даты 2019-12-01 12:11
                       return(([datetime]::parseexact($dt, 'yyyy-MM-dd HH:mm', $null)).ToString('yyyy-MM-ddTHH:mm:ss.fffZ'))
                       }

#####################################
# функция->объект
#####################################

function  Core_CreateNewObj2 {
                             param(
                             $Columns,
                             $Values
                             
                             )
                            
                             $obj = New-Object -TypeName PSObject
                             $count=0
                             $Columns|%{
                             $key=$Values[$count]
                             $obj|Add-Member -MemberType NoteProperty -Name $_ -Value $key
                             $count+=1
                             }
                             return $obj

}

######################################
# Xpath
######################################

function Core_CreateXpath {
                        param (
                                [Parameter(Position=1)]
                                #[ValidateSet('Application','Setup','System','Security', 'PS', 'TSLocalSession','TSRemoteConnection', 'WMI')]
                                [System.String]$Log,
                                $RecID=$null,
                                [Parameter(Position=2)]
                                [array]$id,
                                [Parameter(Position=3)]
                                $starttime=$null,
                                $endtime=$null,
                                [Parameter(Position=4)]
                                [int[]]$lastNMin=$null,
                                [int[]]$lastNHour=$null,
                                [int[]]$lastNDay=$null
                                
                                # обязательные поля logname и id
                                # Применяются блоки starttime-endtime или lastn*
                                # create_xpath  -log system -id 23 -starttime '2019-12-01 12:11'
                                # create_xpath  -log system -id 23 -starttime '2019-12-01 12:10' -endtime '2019-12-01 12:20'
                                # create_xpath  -log system -id 23 -lastNMin 10
                                # формат даты 2019-12-01 12:11

                                )
                                $q=@()
                                $WorkLog = "Application","Setup","System","Security","Microsoft-Windows-PowerShell/Operational","Microsoft-Windows-TerminalServices-LocalSessionManager/Operational","Microsoft-Windows-TerminalServices-RemoteConnectionManager/Operational","Microsoft-Windows-WMI-Activity/Operational"
                                if($WorkLog -contains $Log){
                                if($RecID -ne $null){$RecID = (' and EventRecordID > {0}' -f $RecID)}
                                $TimeFilter = $null
                                if($starttime -ne $null){
                                                        $lastNMin = $null
                                                        $lastNHour = $null
                                                        $lastNDay = $null
                                                        if($endtime -ne $null){$TimeFilter="TimeCreated[@SystemTime&gt;='{0}' and @SystemTime&lt;='{1}']" -f (Core_DTParser -dt $starttime),(Core_DTParser -dt $endtime)}
                                                        else{$TimeFilter = " and TimeCreated[@SystemTime&lt;='{0}']" -f (Core_DTParser -dt $starttime)}
                                                        }
                                else {
                                        if ($lastNMin -ne $null){$TimeFilter = " and TimeCreated[timediff(@SystemTime) &lt;= {0}]" -f (60*1000*[convert]::ToInt32($lastNMin,10))
                                                                 $lastNHour = $null
                                                                 $lastNDay = $null
                                                                 break
                                                                 }
                                        if ($lastNHour){$lastNMin = $null
                                                        $TimeFilter = " and TimeCreated[timediff(@SystemTime) &lt;= {0}]" -f (60*60*1000*[convert]::ToInt32($lastNHour,10))
                                                        $lastNDay = $null
                                                        break
                                                        }
                                        if ($lastNDay){$lastNMin = $null
                                                       $lastNHour = $null
                                                       $TimeFilter = " and TimeCreated[timediff(@SystemTime) &lt;= {0}]" -f (60*60*24*1000*[convert]::ToInt32($lastNDay,10))
                                                       break
                                                      } 
                                      }
                                      
                                
                                $id| %{$q+=('<QueryList><Query Id="0" Path="{0}"><Select Path="{0}">*[System[(EventID={1}){2}{3}]]</Select></Query></QueryList>' -f $Log,$_, $TimeFilter,$RecID)}
                                
                                }
                                else {return "error"}
return($q)                                             
}

#Core_CreateXpath -Log security -id 4624,4625  

function Core_CreateXpathTable {
                                param(
                        $RulesFullObj,
                        #Путь к папке c lastposition
                        $LPPath,
                        #Параметры для формирования xpath
                        $xp_StartTime=$null,
                        $xp_EndTime=$null,
                        $xp_LastNMin=$null,
                        $xp_LastNHour=$null,
                        $xp_LastNDay=$null
                        )
                        $tmpObj=@()
                        $Table=@()
                        foreach($iRO in $RulesFullObj){$iRO|%{$_.EventID}|%{$tmpObj+=Core_CreateNewObj2 -Columns LogName,EventId -Values $iRO.Channel, $_}}
                        
                        foreach($itmpObj in ($tmpObj| Sort-Object -Unique LogName,EventId|Group-Object LogName)){ 
                                                                                                       #Проверяем как будем проводить выборку: по последней позиции или за промежуток времени
                                                                                                       if(($xp_StartTime -or $xp_EndTime -or $xp_LastNMin -or $xp_LastNHour -or $xp_LastNDay) -eq $null){$LastPosition=$null}
                                                                                                       else{$LastPosition = GetLastPosition -lppath $LPPath -channel $_.name}
                                                                            
                                                                                                       $itmpObj.group| %{
                                                                                                                        $q=Core_CreateXpath -Log $itmpObj.name -id $_.EventId -RecID $LastPosition  -starttime $xp_StartTime -endtime $xp_EndTime -lastNMin $xp_LastNMin -lastNHour $xp_LastNHour -lastNDay $xp_LastNDay
                                                                                                                        $Table+=Core_CreateNewObj2 -Columns LogName, EventId, Query -Values $itmpObj.name, $_.EventId, $q
                                                                                                                        }
                                                                                                     }
                        $tmpObj=$null
                        Return ($Table)



}
Core_CreateXpathTable -RulesFullObj (GetRule2Obj -path c:\rules) -LPPath C:\Rules\lp | ft -AutoSize

#################################################################


function evt_to_obj {
                    Param( 
                          [parameter(mandatory=$true)]$data 
                           )
                 
                    $evt=[xml]$data.toxml()
                    $FData = @{ 
                                EventID = $evt.Event.System.EventID; 
                                Channel = $evt.Event.System.Channel; 
                                Computer = $evt.Event.System.Computer; 
                                TimeCreated = $evt.Event.System.TimeCreated.SystemTime
                                
                                } 
                                                                         
                    $prop = $evt.Event.EventData.Data| %{$_.Name}
                    foreach($iprop in $prop){ 
                                             $Fdata[$iprop] = $evt.SelectSingleNode("//*[name()='EventData']/*[@Name='$iprop']").'#text'
                                             }
                                             
                    return($Fdata)

}

#Get-WinEvent -LogName security -MaxEvents 1 | %{evt_to_obj -data $_} | %{Core_ConvertToJson $_}



function GetRule2Obj {
                        param ($path)
                        # путь к каталогу где хранятся правила c:\rules
                        if(Test-Path $path){
                                            if(([regex]::Match($path,"\\$")).Success -eq $false){$path=$path+"\"}
                                            return ((Get-ChildItem -path ($path + '*.*') | %{Core_ConvertFromJson -item (Get-Content -path $_.FullName)})) # вернуть рекурсию -Recurse
                                           } 
                  
                        else{return "error"}                    


}
#GetRule2Obj -path c:\rules



function GetLastPosition {
                          param(
                                $LPPath,
                                $Channel
                                )
                                if(([regex]::Match($LPPath,"\\$")).Success -eq $false){$LPPath=$LPPath+"\"}
                                $text=Get-Content -Path ($LPPath+$Channel+".txt") -ErrorAction SilentlyContinue
                                if($text){return $text}else{return $null}
                                }
#GetLastPosition -lppath C:\Rules\lp -channel Security



($evt.SelectSingleNode("//*[@Name='TargetUserSid']")).'#text' # system, sec
($evt.GetElementsByTagName("Address"))|%{$_.'#text'}
