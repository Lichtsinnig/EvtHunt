function dateparser {
                     param ($dt)
                     # формат даты 2019-12-01 12:11
                     return(([datetime]::parseexact($dt, 'yyyy-MM-dd HH:mm', $null)).ToString('yyyy-MM-ddTHH:mm:ss.fffZ'))
                    }


function create_xpath {
                        param (
                                [Parameter(Position=1)]
                                [ValidateSet('Application','Setup','System','Security', 'PS', 'TSLocalSession','TSRemoteConnection', 'WMI')]
                                [System.String]$Log,
                                [Parameter(Position=2)]
                                [array]$id,
                                [Parameter(Position=3)]
                                $starttime=$null,
                                $endtime=$null,
                                [Parameter(Position=4)]
                                [int[]]$lastNMin=$null,
                                [int[]]$lastNHour=$null,
                                [int[]]$lastNDay=$null
                                # обязательные поля logname и id
                                # Применяются блоки starttime-endtime или lastn*
                                # create_xpath  -log system -id 23 -starttime '2019-12-01 12:11'
                                # create_xpath  -log system -id 23 -starttime '2019-12-01 12:10' -endtime '2019-12-01 12:20'
                                # create_xpath  -log system -id 23 -lastNMin 10
                                # формат даты 2019-12-01 12:11

                                )
 
            $TM_a=@()
            $TM_a+="(EventID=" +($id -join " or EventID=") + ")"                    
            Switch ($log) { 
                         'Application'{$ObjLogName = "Application"}   
                         'Setup' {$ObjLogName = "Setup"}  
                         'System' {$ObjLogName = "System"} 
                         'Security' {$ObjLogName = "Security"}    
                         'PS' {$ObjLogName = "Microsoft-Windows-PowerShell/Operational"} 
                         'TSLocalSession' {$ObjLogName = "Microsoft-Windows-TerminalServices-LocalSessionManager/Operational"} 
                         'TSRemoteConnection' {$ObjLogName = "Microsoft-Windows-TerminalServices-RemoteConnectionManager/Operational"} 
                         'WMI' {$ObjLogName = "Microsoft-Windows-WMI-Activity/Operational"} 
                          }
            if ($starttime){
                            $lastNMin=$null
                            $lastNHour=$null
                            $lastNDay=$null
                            if($endtime){$TM_a += "TimeCreated[@SystemTime&gt;='{0}' and @SystemTime&lt;='{1}']" -f (dateparser -dt $starttime),(dateparser -dt $endtime)}
                            else {$TM_a += "TimeCreated[@SystemTime&lt;='{0}']" -f (dateparser -dt $starttime)}
                           
                            }
            else {
                    if ($lastNMin){$lastNHour= $null
                                   $lastNDay=$null
                                   #$lastNMin_s=60*1000*$lastNMin
                                   $TM_a += "TimeCreated[timediff(@SystemTime) &lt;= {0}]" -f (60*1000*[convert]::ToInt32($lastNMin,10))
                                   }
                    if ($lastNHour){$lastNMin=$null
                                    $lastNDay=$null
                                    #$lastNHour_s=60*60*1000*$lastNHour
                                    $TM_a += "TimeCreated[timediff(@SystemTime) &lt;= {0}]" -f (60*60*1000*[convert]::ToInt32($lastNHour,10))
                                    }
                    if ($lastNDay){$lastNMin= $null
                                   $lastNHour= $null
                                   #$lastNDay_s=60*60*24*1000*$lastNDay
                                   $TM_a += "TimeCreated[timediff(@SystemTime) &lt;= {0}]" -f (60*60*24*1000*[convert]::ToInt32($lastNDay,10))
                                   } 
                    } 
      
                    
                    return( ('<QueryList><Query Id="0" Path="{0}"><Select Path="{0}">*[System[{1}]]</Select></Query></QueryList>' -f $ObjLogName, ($TM_a -join " and " )))
                                             
}

$q_xpath = create_xpath  -log system -id 10148 -lastNMin 600000
Get-WinEvent -FilterXml  $q_xpath |fl *
